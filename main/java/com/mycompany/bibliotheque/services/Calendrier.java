/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.bibliotheque.services;
import java.sql.*;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;
/**
 *
 * @author user
 */
public class Calendrier extends javax.swing.JFrame {
private DefaultTableModel tableModel;
    /**
     * Creates new form Calendrier
     */
    public Calendrier() {
        initComponents();
        tableModel = (DefaultTableModel) jTable1.getModel();
        remplirTableReservationLivres();
        remplirTableRetardsRetourLivres();
        remplirTableAbonnementsExpiration();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));

        jLabel1.setText("Retards de retour de livres :");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id Abonné", "Titre_livre", "Date d'emprunt", "Date de retour fixé", "Etat de remise"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id_abonné", "Title_livre", "Etat de réservation"
            }
        ));
        jScrollPane3.setViewportView(jTable3);

        jLabel2.setText("Réservations de livres :");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Id Abonné", "Date d'abonnement", "Date d'expiration d'abonnement", "Etat d'abonnement"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jLabel3.setText("Abonnements arrivant à expiration :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(541, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 598, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(49, 421, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel3)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(106, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
 public static void main(String args[]) {
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calendrier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calendrier().setVisible(true);
            }
        });
    }  
public void remplirTableReservationLivres() {
    DefaultTableModel tableModel = new DefaultTableModel();
    tableModel.addColumn("Titre");
    tableModel.addColumn("idA");
    tableModel.addColumn("État de réservation");

    // Code pour récupérer les valeurs d'idA et de Titre à partir de la base de données
    try {
        Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/dbtest", "root", "Classroom123");
        Statement statement = connection.createStatement();
        ResultSet resultSet = statement.executeQuery("SELECT le.idA, l.Titre FROM LivresEmpruntés le JOIN Livres l ON le.idL = l.id");

        // Parcourir les résultats de la requête et ajouter les lignes correspondantes au tableau
        while (resultSet.next()) {
            String idA = resultSet.getString("idA");
            String titre = resultSet.getString("Titre");
            String etatReservation = "Réservé";
            tableModel.addRow(new Object[]{idA, titre, etatReservation});
        }

        // Fermer les ressources
        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    jTable3.setModel(tableModel);
}

    public void remplirTableRetardsRetourLivres() {
    DefaultTableModel tableModel = new DefaultTableModel();
    tableModel.addColumn("IdAbonné");
    tableModel.addColumn("Titre");
    tableModel.addColumn("Date_emprunt");
    tableModel.addColumn("Date_retour_fixe");
    tableModel.addColumn("Etat_remise");

    // Effectuer les calculs de dates ici
    LocalDate dateEmprunt = LocalDate.now();
    LocalDate dateRetourFixe = dateEmprunt.plusWeeks(1);
    LocalDate dateActuelle = LocalDate.now();

    // Code pour récupérer les valeurs d'idA et de titre à partir de la base de données
    try {
        Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/dbtest", "root", "Classroom123");
        Statement statement = connection.createStatement();
        ResultSet resultSet = statement.executeQuery("SELECT le.idA, l.Titre FROM LivresEmpruntés le JOIN Livres l ON le.idL = l.id");

        // Parcourir les résultats de la requête et ajouter les lignes correspondantes au tableau
        while (resultSet.next()) {
            String idA = resultSet.getString("idA");
            String titre = resultSet.getString("Titre");
            String dateEmpruntStr = dateEmprunt.toString();
            String dateRetourFixeStr = dateRetourFixe.toString();
            String etatRemise = dateActuelle.isAfter(dateRetourFixe) ? "En retard" : "À temps";
            tableModel.addRow(new Object[]{idA, titre, dateEmpruntStr, dateRetourFixeStr, etatRemise});
        }

        // Fermer les ressources
        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    jTable1.setModel(tableModel);
}

    public void remplirTableAbonnementsExpiration() {
    DefaultTableModel tableModel = new DefaultTableModel();
    tableModel.addColumn("IdA");
    tableModel.addColumn("dateInscription");
    tableModel.addColumn("dateExpiration");
    tableModel.addColumn("Etat_abonnement");

    // Effectuer les calculs de dates ici
    LocalDate dateInscription = LocalDate.now();
    LocalDate dateExpiration = dateInscription.plusMonths(6);
    LocalDate dateActuelle = LocalDate.now();

    // Code pour récupérer la valeur de l'id à partir de la base de données
    try {
        Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/dbtest", "root", "Classroom123");
        Statement statement = connection.createStatement();
        ResultSet resultSet = statement.executeQuery("SELECT id FROM Abonnés");

        // Récupérer l'id (première valeur) de la première ligne de la table "Abonnés"
        if (resultSet.next()) {
            String idA = resultSet.getString("id");
            String dateInscriptionStr = dateInscription.toString();
            String dateExpirationStr = dateExpiration.toString();
            String etatAbonnement = dateActuelle.isAfter(dateExpiration) ? "Expiré" : "Valide";
            tableModel.addRow(new Object[]{idA, dateInscriptionStr, dateExpirationStr, etatAbonnement});
        }

        // Fermer les ressources
        resultSet.close();
        statement.close();
        connection.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    jTable2.setModel(tableModel);
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    // End of variables declaration//GEN-END:variables
}
